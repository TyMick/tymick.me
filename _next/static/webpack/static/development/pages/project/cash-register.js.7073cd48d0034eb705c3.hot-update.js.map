{"version":3,"file":"static/webpack/static/development/pages/project/cash-register.js.7073cd48d0034eb705c3.hot-update.js","sources":["webpack:///./pages/project/cash-register.jsx"],"sourcesContent":["\"use strict\";\n\nimport React, { useState } from \"react\";\nimport Head from \"next/head\";\nimport Gist from \"react-gist\";\nimport { Container, Form, InputGroup, Button, Card } from \"react-bootstrap\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { githubGist } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\n\nexport default () => {\n  function checkCashRegister(price, cash, cid) {\n    let changeLeft = cash - price;\n    let drawerTotal = cid.reduce(function(acc, cur) {\n      return acc + cur[1];\n    }, 0);\n\n    if (changeLeft == drawerTotal) {\n      return { status: \"CLOSED\", change: cid };\n    } else {\n      let changeUnits = [];\n\n      function processUnit(name, amt) {\n        let unitTotal = cid.filter(item => item[0] == name)[0][1];\n        let unitChange = Math.min(\n          unitTotal,\n          Math.floor(changeLeft / amt) * amt\n        );\n        unitChange = Math.round(unitChange * 100) / 100;\n        if (unitChange > 0) {\n          changeUnits.push([name, unitChange]);\n          changeLeft -= unitChange;\n          changeLeft = Math.round(changeLeft * 100) / 100; //fixes flooring issues\n        }\n      }\n      processUnit(\"ONE HUNDRED\", 100);\n      processUnit(\"TWENTY\", 20);\n      processUnit(\"TEN\", 10);\n      processUnit(\"FIVE\", 5);\n      processUnit(\"ONE\", 1);\n      processUnit(\"QUARTER\", 0.25);\n      processUnit(\"DIME\", 0.1);\n      processUnit(\"NICKEL\", 0.05);\n      processUnit(\"PENNY\", 0.01);\n\n      if (changeLeft == 0) {\n        return { status: \"OPEN\", change: changeUnits };\n      } else {\n        return { status: \"INSUFFICIENT_FUNDS\", change: [] };\n      }\n    }\n  }\n\n  const [price, setPrice] = useState(0);\n  const [cash, setCash] = useState(0);\n  const [penny, setPenny] = useState(0);\n  const [nickel, setNickel] = useState(0);\n  const [dime, setDime] = useState(0);\n  const [quarter, setQuarter] = useState(0);\n  const [dollar, setDollar] = useState(0);\n  const [five, setFive] = useState(0);\n  const [ten, setTen] = useState(0);\n  const [twenty, setTwenty] = useState(0);\n  const [hundred, setHundred] = useState(0);\n  const [functionCall, setFunctionCall] = useState(null);\n  const [functionReturn, setFunctionReturn] = useState(null);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setFunctionCall(\n      \"checkCashRegister(\" +\n        price +\n        \", \" +\n        cash +\n        ', [[\"PENNY\", ' +\n        penny +\n        '], [\"NICKEL\", ' +\n        nickel +\n        '], [\"DIME\", ' +\n        dime +\n        '], [\"QUARTER\", ' +\n        quarter +\n        '], [\"DOLLAR\", ' +\n        dollar +\n        '], [\"FIVE\", ' +\n        five +\n        '], [\"TEN\", ' +\n        ten +\n        '], [\"TWENTY\", ' +\n        twenty +\n        '], [\"ONE HUNDRED\", ' +\n        hundred +\n        \"]])\"\n    );\n    setFunctionReturn(\n      JSON.stringify(\n        checkCashRegister(price, cash, [\n          [\"PENNY\", penny],\n          [\"NICKEL\", nickel],\n          [\"DIME\", dime],\n          [\"QUARTER\", quarter],\n          [\"DOLLAR\", dollar],\n          [\"FIVE\", dollar],\n          [\"TEN\", ten],\n          [\"TWENTY\", twenty],\n          [\"ONE HUNDRED\", hundred]\n        ])\n      )\n    );\n  };\n\n  return (\n    <>\n      <Head>\n        <title>Cash register â€“ Ty Mick</title>\n      </Head>\n\n      <Container>\n        <h1 className=\"mb-4\">Cash register function</h1>\n\n        {/* Input form */}\n        <Form className=\"mb-4\" onSubmit={handleSubmit}>\n          <Form.Row>\n            <Form.Group controlId=\"price\" className=\"col-sm\">\n              <Form.Label className=\"lead\">\n                Purchase price (<code>price</code>)\n              </Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsPrice\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={price}\n                  onChange={e => {\n                    setPrice(e.target.value);\n                  }}\n                  aria-describedby=\"dsPrice\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group controlId=\"cash\" className=\"col-sm\">\n              <Form.Label className=\"lead\">\n                Payment amount (<code>cash</code>)\n              </Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsCash\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={cash}\n                  onChange={e => {\n                    setCash(e.target.value);\n                  }}\n                  aria-describedby=\"dsCash\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <div id=\"cid\" className=\"col lead\">\n              Cash in drawer (<code>cid</code>)\n            </div>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group\n              controlId=\"penny\"\n              className=\"col-sm-6 col-md-4 col-lg-3\"\n            >\n              <Form.Label>Value in pennies</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsPenny\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={penny}\n                  onChange={e => {\n                    setPenny(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsPenny\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group\n              controlId=\"nickel\"\n              className=\"col-sm-6 col-md-4 col-lg-3\"\n            >\n              <Form.Label>Value in nickels</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsNickel\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"0.05\"\n                  min=\"0\"\n                  value={nickel}\n                  onChange={e => {\n                    setNickel(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsNickel\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group controlId=\"dime\" className=\"col-sm-6 col-md-4 col-lg-3\">\n              <Form.Label>Value in dimes</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsDime\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"0.1\"\n                  min=\"0\"\n                  value={dime}\n                  onChange={e => {\n                    setDime(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsDime\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group\n              controlId=\"quarter\"\n              className=\"col-sm-6 col-md-4 col-lg-3\"\n            >\n              <Form.Label>Value in quarters</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsQuarter\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"0.25\"\n                  min=\"0\"\n                  value={quarter}\n                  onChange={e => {\n                    setQuarter(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsQuarter\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group\n              controlId=\"dollar\"\n              className=\"col-sm-6 col-md-4 col-lg-3\"\n            >\n              <Form.Label>Value in one-dollar bills</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsDollar\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"1\"\n                  min=\"0\"\n                  value={dollar}\n                  onChange={e => {\n                    setDollar(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsDollar\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group controlId=\"five\" className=\"col-sm-6 col-md-4 col-lg-3\">\n              <Form.Label>Value in five-dollar bills</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsFive\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"5\"\n                  min=\"0\"\n                  value={five}\n                  onChange={e => {\n                    setFive(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsFive\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group controlId=\"ten\" className=\"col-sm-6 col-md-4 col-lg-3\">\n              <Form.Label>Value in ten-dollar bills</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsTen\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"10\"\n                  min=\"0\"\n                  value={ten}\n                  onChange={e => {\n                    setTen(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsTen\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group\n              controlId=\"twenty\"\n              className=\"col-sm-6 col-md-4 col-lg-3\"\n            >\n              <Form.Label>Value in twenty-dollar bills</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsTwenty\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"20\"\n                  min=\"0\"\n                  value={twenty}\n                  onChange={e => {\n                    setTwenty(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsTwenty\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group\n              controlId=\"hundred\"\n              className=\"col-sm-6 col-md-4 col-lg-3\"\n            >\n              <Form.Label>Value in hundred-dollar bills</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"dsHundred\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"number\"\n                  step=\"100\"\n                  min=\"0\"\n                  value={hundred}\n                  onChange={e => {\n                    setHundred(e.target.value);\n                  }}\n                  aria-labelledby=\"cid\"\n                  aria-describedby=\"dsHundred\"\n                  required\n                />\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n\n          <Button variant=\"primary\" type=\"submit\">\n            Check the cash register\n          </Button>\n        </Form>\n\n        {/* Function call and return */}\n        <div className=\"mx-2 mx-sm-5 mb-4\">\n          <div className=\"d-flex align-items-center mb-3\">\n            <h5 className=\"mb-0 mr-3\">Function&nbsp;call:</h5>\n            <Card className=\"mb-0\">\n              {functionCall ? (\n                <SyntaxHighlighter\n                  language=\"javascript\"\n                  style={githubGist}\n                  className=\"text-wrap px-2 py-1 m-0\"\n                >\n                  {functionCall}\n                </SyntaxHighlighter>\n              ) : (\n                <pre className=\"px-2 py-1 m-0\">&nbsp;</pre>\n              )}\n            </Card>\n          </div>\n\n          <div className=\"d-flex align-items-center\">\n            <h5 className=\"mb-0 mr-3\">Returns:</h5>\n            <Card className=\"mb-0\">\n              {functionReturn ? (\n                <SyntaxHighlighter\n                  language=\"json\"\n                  style={githubGist}\n                  className=\"text-wrap px-2 py-1 m-0\"\n                >\n                  {functionReturn}\n                </SyntaxHighlighter>\n              ) : (\n                <pre className=\"px-2 py-1 m-0\">&nbsp;</pre>\n              )}\n            </Card>\n          </div>\n        </div>\n\n        {/* GitHub Gist */}\n        <div className=\"mb-2\">\n          <Gist id=\"24cdeb02eb5f4e3e2cd14f91f5bbe5cb\" />\n        </div>\n\n        {/* Explanation */}\n        <p>\n          I created this function as a requirement for{\" \"}\n          <a href=\"https://www.freecodecamp.org/certification/tywmick/javascript-algorithms-and-data-structures\">\n            my freeCodeCamp JavaScript Algorithms and Data Structures\n            Certification\n          </a>\n          . Output isn't terribly human-readable, but I suppose cash registers\n          don't really speak English, so I guess that's okay. Here are the\n          requirements I built to:\n        </p>\n\n        <ul>\n          <li>\n            Design a cash register drawer function\n            <code>checkCashRegister()</code> that accepts purchase price as the\n            first argument (<code>price</code>), payment as the second argument\n            (<code>cash</code>), and cash-in-drawer (<code>cid</code>) as the\n            third argument.\n          </li>\n          <li>\n            <code>cid</code> is a 2D array listing available currency.\n          </li>\n          <li>\n            The\n            <code>checkCashRegister()</code> function should always return an\n            object with a<code>status</code> key and a<code>change</code> key.\n          </li>\n          <li>\n            Return\n            <code>&#123;status: \"INSUFFICIENT_FUNDS\", change: []&#125;</code> if\n            cash-in-drawer is less than the change due, or if you cannot return\n            the exact change.\n          </li>\n          <li>\n            Return\n            <code>&#123;status: \"CLOSED\", change: [...]&#125;</code> with\n            cash-in-drawer as the value for the key\n            <code>change</code> if it is equal to the change due.\n          </li>\n          <li>\n            Otherwise, return\n            <code>&#123;status: \"OPEN\", change: [...]&#125;</code>, with the\n            change due in coins and bills, sorted in highest to lowest order, as\n            the value of the\n            <code>change</code> key.\n          </li>\n        </ul>\n      </Container>\n    </>\n  );\n};\n"],"mappings":"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AA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgsourceRoot":""}