{"version":3,"file":"static/webpack/static/development/pages/project/telephone-number-validator.js.18e70eb5e34ca9035203.hot-update.js","sources":["webpack:///./pages/project/telephone-number-validator.jsx"],"sourcesContent":["\"use strict\";\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport Gist from \"react-gist\";\nimport { Container } from \"react-bootstrap\";\nimport AlgorithmTest from \"../../components/algorithm-test\";\n\nexport default () => {\n  function telephoneCheck(str) {\n    let numDigits = str.match(/\\d/g).length;\n\n    if (numDigits == 10) {\n      if (\n        !!str.match(/^\\(\\d{3}\\) {0,1}\\d{3}-\\d{4}$/) ||\n        !!str.match(/^\\d{3}([ \\-]{0,1})\\d{3}\\1\\d{4}$/)\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    } else if (numDigits == 11) {\n      if (\n        !!str.match(/^1 {0,1}\\(\\d{3}\\) {0,1}\\d{3}-\\d{4}$/) ||\n        !!str.match(/^1 \\d{3}([ \\-]{0,1})\\d{3}\\1\\d{4}$/)\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Telephone number validator â€“ Ty Mick</title>\n      </Head>\n\n      <Container>\n        <h1 className=\"mb-4\">Telephone number validator algorithm</h1>\n\n        <AlgorithmTest\n          algorithm={telephoneCheck}\n          argumentName=\"str\"\n          inputType=\"text\"\n        />\n\n        <div className=\"mb-2\">\n          <Gist id=\"1e5b0900551a40b2bf22bad0455837aa\" />\n        </div>\n\n        {/* Explanation */}\n        <p>\n          I created this algorithm as a requirement for{\" \"}\n          <a href=\"https://www.freecodecamp.org/certification/tywmick/javascript-algorithms-and-data-structures\">\n            my freeCodeCamp JavaScript Algorithms and Data Structures\n            Certification\n          </a>\n          . It is an implementation of the{\" \"}\n          <a href=\"https://en.wikipedia.org/wiki/ROT13\">ROT13</a> cipher,\n          decoding (or encoding) a given message by replacing each letter with\n          the letter 13 places away from it in the alphabet.\n        </p>\n      </Container>\n    </>\n  );\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;A","sourceRoot":""}