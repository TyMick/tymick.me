{"version":3,"file":"static/webpack/static/development/pages/project/caesars-cipher.js.3db1b8eb8cc96d984129.hot-update.js","sources":["webpack:///./pages/project/caesars-cipher.jsx"],"sourcesContent":["\"use strict\";\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport Gist from \"react-gist\";\nimport { Container } from \"react-bootstrap\";\nimport AlgorithmTest from \"../../components/algorithm-test\";\n\nexport default () => {\n  function rot13(str) {\n    let decoded = \"\";\n    \n    for (let i = 0; i < str.length; i++) {\n      if (inRange(str.charCodeAt(i), [65, 77], [97, 109])) {\n        decoded += String.fromCharCode(str.charCodeAt(i) + 13);\n      } else if (inRange(str.charCodeAt(i), [78, 90], [110, 122])) {\n        decoded += String.fromCharCode(str.charCodeAt(i) - 13);\n      } else {\n        decoded += str[i];\n      }\n    }\n  \n    return decoded;\n\n    function inRange(target, ...ranges) {\n      let inAnyRange = false;\n      ranges.forEach(range => {\n        if (range[0] <= target && target <= range[1]) {\n          inAnyRange = true;\n        }\n      })\n      return inAnyRange;\n    }\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Caesar's cipher â€“ Ty Mick</title>\n      </Head>\n\n      <Container>\n        <h1 className=\"mb-4\">Caesar's cipher algorithm</h1>\n\n        <AlgorithmTest\n          algorithm={rot13}\n          argumentName=\"str\"\n          inputType=\"text\"\n        />\n\n        <div className=\"mb-2\">\n          <Gist id=\"1a7997c7d07b7e6375f773963df36946\" />\n        </div>\n\n        {/* Explanation */}\n        <p>\n          I created this algorithm as a requirement for{\" \"}\n          <a href=\"https://www.freecodecamp.org/certification/tywmick/javascript-algorithms-and-data-structures\">\n            my freeCodeCamp JavaScript Algorithms and Data Structures\n            Certification\n          </a>\n          . It converts the number given into a Roman numeral.\n        </p>\n      </Container>\n    </>\n  );\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;A","sourceRoot":""}